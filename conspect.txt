react-router-dom v.4

  Создание маршрутов

import { BrowserRouter as Router, Route } from 'react-router-dom';

Оборачиваем все компоненты с маршрутами в BrowserRouteer.
Сами маршруты создаём с помощью компонента Router. 
У него есть 2 props: path - путь, component - компонент для рендеринга, пример:

import { BrowserRouter as Router } from 'react-router-dom';

const App = () => (
    <Router>
        <Route path='/home' component={Home} />
        <Route path='/about' component={About} />
        <Route path='/' component={Main} />
    </Router>
)
В свойстве path все маршруты начинаются со /. По умолчанию маршрутизатор принимает во внимание только начало пути.
Это очень полезно для вложенной навигации. Но сейчас это нам не подходит. Для исправления проблемы
компоненту Route добавляется свойство exact.
Это свойство укажет маршруту, что путь должен соответствовать url точно.

  Навигация
Вместо ссылки будем использовать имеющийся в маршрутизаторе компонент Link, чтобы страница не перезагружалась.
import { Link } from 'react-router-dom';

<Link to='/'>Главная</Link>
href заменяем на to
  Активные ссылки
В маршрутизаторе помимо компонента Link имеет компонент NavLink, который позволит добиться выделения активных ссылок.
Маршрутизатор добавляет класс active (активной ссылки), этот класс мы можем стилизовать оперделённым образом.
Компонент NavLink предоставляет указать активный класс с помощью свойства activeClassName
<NavLink to="/" className="mdc-tab" activeClassName="mdc-tab--active">Главная</NavLink>
Есть одна проблема, главная страница активная всегда, так как / присутствует на каждом маршруте, рещение проблема exact как и в Route
Стили для активного элемента можно казать с помощью свойства activeStyle - делается с помощью специального объекта.
<NavLink exact to="/" className="mdc-tab" activeStyle={{color: 'orange',}}>Главная</NavLink>
Мы немнгого повторяемся, используя у каждого компонента свойство activeClassName. Используем обёртку для компонента NavLink.
Компонент, в который мы обернём NavLink будет возвращать исходный компонент NavLink, но немного изменённый, а именно мы присвоим ему активный класс.
Компоненты, которые оборачивают другие компоненты и возвращают их модифицированную версию, называют компонентами высшего порядка.
import React from 'react';
import { NavLink } from 'react-router-dom';
 
export const ToolbarLink = ({ children, ...rest }) => 
    <NavLink {...rest} activeClassName="mdc-tab--active">{children}</NavLink>;

  Использование Switch
Если введём url, для которого у нас нет маршрута, то ничего не отобразится. Нам нужно выводить предупреждающую страницу с ошибкой.
Для этого у нас есть компонент NotFound. Создадим маршрут, но для него не будет свойства path, так как он может быть любым.
<Route component={NotFound} />
Компонент NotFound отображается всегда, для того чтобы отобразить компонент NotFound в случае того, если не отображается не один маршрут,
нам нужен Switch из маршрутизатора, и все маршруты вложить в него:             
<Switch>
  <Route exact path="/" component={Home} />
  <Route path='/about' component={About} />
  <Route path='/books' component={Books} />
  <Route path="/login" component={Login} />
  <Route component={NotFound} />`
</Switch>
Компонент Switch отобразит первый подходящий маршрут, если не один маршрут не подойдёт, то отобразится компонент без
свойства path.

  Вложенная навигация





